mod default;
mod slider;

pub use default::*;
pub use slider::*;
use specs::World;

/// Options for rendering a value as a struct (i.e. draw all of its subfields)
#[derive(Debug, Default)]
pub struct InspectArgsStruct {
    pub header: Option<bool>,
    pub indent_children: Option<bool>,
}

impl From<InspectArgsDefault> for InspectArgsStruct {
    fn from(default_args: InspectArgsDefault) -> Self {
        Self {
            header: default_args.header,
            indent_children: default_args.indent_children,
        }
    }
}

/// Renders a struct (i.e. draw all of its subfields). Most traits are implemented by hand-written code, but this trait
/// is normally generated by putting `#[derive(Inspect)]` on a struct
pub trait InspectRenderStruct<T> {
    fn render(
        data: &[&T],
        label: &'static str,
        world: &mut World,
        ui: &imgui::Ui,
        args: &InspectArgsStruct,
    );
    fn render_mut(
        data: &mut [&mut T],
        label: &'static str,
        world: &mut World,
        ui: &imgui::Ui,
        args: &InspectArgsStruct,
    ) -> bool;
}

/// Utility function that, given a list of references, returns Some(T) if they are the same, otherwise None
pub fn get_same_or_none<T: PartialEq + Clone>(data: &[&T]) -> Option<T> {
    if data.is_empty() {
        return None;
    }

    let first = data[0].clone();
    for d in data {
        if **d != first {
            return None;
        }
    }

    Some(first)
}

/// Utility function that, given a list of references, returns Some(T) if they are the same, otherwise None
fn get_same_or_none_mut<T: PartialEq + Clone>(data: &mut [&mut T]) -> Option<T> {
    if data.is_empty() {
        return None;
    }

    let first = data[0].clone();
    for d in data {
        if **d != first {
            return None;
        }
    }

    Some(first)
}
